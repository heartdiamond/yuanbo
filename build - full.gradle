defaultTasks 'distZip'

buildscript {
	repositories {
		maven { url "http://maven.oschina.net/content/groups/public/" }
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("org.asciidoctor:asciidoctor-gradle-plugin:0.7.0")
		classpath("io.spring.gradle:docbook-reference-plugin:0.3.0")
		classpath("ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.1")
	}
}

ext {
	moduleProjects  = subprojects.findAll {
		!it.name.equals('spring-build-src') && !it.name.equals('spring-framework-bom')
	}
}

description = "Spring Framework"

apply plugin: "asciidoctor"
apply plugin: "docbook-reference"
apply plugin: "groovy"

apply from: "${rootProject.projectDir}/gradle/jdiff.gradle"

asciidoctor {
	baseDir = project.file('src/asciidoc')
	backend = 'docbook5'
	options = [
		eruby: 'erubis',
		attributes: [
			doctype: 'book',
			'spring-version' : '4.1.3.RELEASE',
			revnumber : '4.1.3.RELEASE',
			docinfo : ""
		]
	]
}

reference {
	sourceDir = asciidoctor.outputDir
	pdfFilename = "spring-framework-reference.pdf"
	epubFilename = "spring-framework-reference.epub"
	expandPlaceholders = ""
}

afterEvaluate {
	tasks.findAll { it.name.startsWith("reference") }.each{ it.dependsOn.add("asciidoctor") }
}


configurations.archives.artifacts.clear()

task docsZip(type: Zip, dependsOn: 'reference') {
	group = "Distribution"
	baseName = "spring-framework"
	classifier = "docs"
	description = "Builds -${classifier} archive containing api and reference " +
		"for deployment at http://static.springframework.org/spring-framework/docs."

	from("src/dist") {
		include "changelog.txt"
	}

	from (reference) {
		into "spring-framework-reference"
	}
}

task distZip(type: Zip, dependsOn: docsZip) {
	group = "Distribution"
	baseName = "spring-framework"
	classifier = "dist"
	description = "Builds -${classifier} archive, containing all jars and docs, " +
				"suitable for community download page."

	ext.baseDir = "${baseName}-4.1.3.RELEASE";

	from("src/dist") {
		include "readme.txt"
		include "license.txt"
		include "notice.txt"
		into "${baseDir}"
		expand(copyright: new Date().format("yyyy"), version: '4.1.3.RELEASE')
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}
	moduleProjects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			if (subproject.tasks.findByPath("sourcesJar")) {
				from subproject.sourcesJar
			}
			if (subproject.tasks.findByPath("javadocJar")) {
				from subproject.javadocJar
			}
		}
	}
}

task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = "Distribution"
	baseName = "spring-framework"
	classifier = "dist-with-deps"
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all runtime dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectNames = rootProject.subprojects*.name
			def artifacts = new HashSet()
			subprojects.each { subproject ->
				(subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts +
				subproject.configurations.optional.resolvedConfiguration.resolvedArtifacts).each { artifact ->
					def dependency = artifact.moduleVersion.id
					if (!projectNames.contains(dependency.name)) {
						artifacts << artifact.file
					}
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives docsZip
	archives distZip
}

task wrapper(type: Wrapper) {
	description = "Generates gradlew[.bat] scripts"
	gradleVersion = "1.12"

	doLast() {
		def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m"
		def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
		File wrapperFile = file("gradlew")
		wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
			"GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
		File wrapperBatFile = file("gradlew.bat")
		wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
			"set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
	}
}